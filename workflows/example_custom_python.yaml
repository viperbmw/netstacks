# Example: Custom Python Logic
# Shows how to use custom Python code for complex logic

name: "Custom Validation Workflow"
description: "Use custom Python to validate network state"

devices:
  - router1
  - router2

steps:
  # Get interface data
  - name: "Get Interface Status"
    type: run_command
    command: "show ip interface brief"
    use_textfsm: true

  # Custom Python validation
  - name: "Custom Interface Validation"
    type: custom_python
    script: |
      # Access previous step results
      interface_data = context['step_results'].get('Get Interface Status', {})

      # Custom validation logic
      critical_interfaces = ['GigabitEthernet0/0', 'GigabitEthernet0/1']
      all_up = True

      for device, data in interface_data.get('data', {}).items():
          interfaces = data.get('interfaces', [])

          for intf in interfaces:
              if intf['name'] in critical_interfaces:
                  if intf['status'] != 'up':
                      all_up = False
                      log.warning(f"Critical interface {intf['name']} is down on {device}")

      # Return result
      if all_up:
          result = {
              'status': 'success',
              'message': 'All critical interfaces are up',
              'data': {'critical_interfaces_checked': len(critical_interfaces)}
          }
      else:
          result = {
              'status': 'failed',
              'message': 'One or more critical interfaces are down'
          }
    on_success: send_success
    on_failure: send_alert

  - name: "Send Success"
    id: send_success
    type: email
    to: "ops@company.com"
    subject: "Validation Passed"
    body: "All critical interfaces validated successfully"

  - name: "Send Alert"
    id: send_alert
    type: email
    to: "oncall@company.com"
    subject: "ALERT: Critical Interface Down"
    body: "Custom validation detected critical interface failure"
